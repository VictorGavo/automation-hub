"""
Automation Hub - Streamlined Flask Application
Modular architecture with clean separation of concerns
"""

from flask import Flask, jsonify, session, redirect, url_for, send_from_directory
from datetime import datetime
import os
import bcrypt

# Import configuration and database
from config import Config
from database import DatabaseManager

# Import modular handlers
from modules.webhook_handlers import create_webhook_handlers, create_api_handlers

# Initialize Flask app
app = Flask(__name__)
app.config.from_object(Config)
app.secret_key = Config.SECRET_KEY

# Initialize handlers
webhook_handlers = create_webhook_handlers()
api_handlers = create_api_handlers()

# Initialize database manager
db_manager = DatabaseManager()

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'database': Config.DB_NAME,
        'testing_mode': Config.TESTING,
        'modules': {
            'daily_books': True,
            'daily_capture': True,
            'webhook_handlers': True,
            'notion_enabled': Config.NOTION_ENABLED,
            'obsidian_goals_enabled': Config.OBSIDIAN_GOALS_ENABLED,
            'google_drive_enabled': Config.GOOGLE_DRIVE_ENABLED
        }
    })

# ============================================================================
# WEBHOOK ENDPOINTS
# ============================================================================

@app.route('/webhook/sod', methods=['POST'])
def sod_webhook():
    """Handle SOD (Start of Day) form submissions"""
    return webhook_handlers.handle_sod_webhook()

@app.route('/webhook/eod', methods=['POST'])
def eod_webhook():
    """Handle EOD (End of Day) form submissions"""
    return webhook_handlers.handle_eod_webhook()

# ============================================================================
# API ENDPOINTS
# ============================================================================

@app.route('/api/daily/<date_str>', methods=['GET'])
def get_daily_entry(date_str):
    """Get daily entry for a specific date"""
    return api_handlers.get_daily_entry(date_str)

@app.route('/api/recent', methods=['GET'])
def get_recent_entries():
    """Get recent entries for monitoring"""
    return api_handlers.get_recent_entries()

@app.route('/api/regenerate/<date_str>', methods=['POST'])
def regenerate_markdown(date_str):
    """Regenerate markdown file for a specific date"""
    return api_handlers.regenerate_markdown(date_str)

@app.route('/api/notion/update-template', methods=['POST'])
def update_notion_template():
    """Manually update Notion Daily Capture template with SOD data"""
    return api_handlers.update_notion_template()

@app.route('/api/notion/test', methods=['GET'])
def test_notion_connection():
    """Test Notion API connection"""
    return api_handlers.test_notion_connection()

# ============================================================================
# DASHBOARD ENDPOINTS (Optional)
# ============================================================================

@app.route('/login', methods=['GET', 'POST'])
def login():
    """Dashboard login route"""
    from flask import request
    
    if request.method == 'POST':
        password = request.form.get('password', '').encode()
        stored_hash = Config.DASHBOARD_PASSWORD_HASH.encode()
        if bcrypt.checkpw(password, stored_hash):
            session['dashboard_authenticated'] = True
            return redirect(url_for('dashboard'))
        else:
            # Show login form with error
            return send_from_directory(
                os.path.join(os.path.dirname(__file__), '../public'), 
                'dashboard.html'
            )
    
    # GET: show login form
    return send_from_directory(
        os.path.join(os.path.dirname(__file__), '../public'), 
        'dashboard.html'
    )

@app.route('/dashboard', methods=['GET'])
def dashboard():
    """Dashboard route (protected)"""
    if not session.get('dashboard_authenticated'):
        return redirect(url_for('login'))
    
    # Serve dashboard.html from public directory
    return send_from_directory(
        os.path.join(os.path.dirname(__file__), '../public'), 
        'dashboard.html'
    )

# ============================================================================
# ERROR HANDLERS
# ============================================================================

@app.errorhandler(404)
def not_found(error):
    """Handle 404 errors"""
    return jsonify({
        'error': 'Endpoint not found',
        'message': 'The requested endpoint does not exist',
        'available_endpoints': {
            'webhooks': ['/webhook/sod', '/webhook/eod'],
            'api': ['/api/daily/<date>', '/api/recent', '/api/regenerate/<date>'],
            'notion': ['/api/notion/test', '/api/notion/update-template'],
            'health': ['/health']
        }
    }), 404

@app.errorhandler(500)
def internal_error(error):
    """Handle 500 errors"""
    return jsonify({
        'error': 'Internal server error',
        'message': 'An unexpected error occurred'
    }), 500

# ============================================================================
# APPLICATION STARTUP
# ============================================================================

def initialize_application():
    """Initialize application components"""
    print("üöÄ Starting Automation Hub...")
    
    # Print current configuration
    Config.print_config()
    
    # Create database tables if they don't exist
    try:
        db_manager.create_tables()
        print("‚úÖ Database initialized")
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        raise
    
    # Test integrations
    if Config.NOTION_ENABLED:
        print("‚úÖ Notion integration enabled")
    else:
        print("‚ÑπÔ∏è Notion integration disabled")
    
    if Config.OBSIDIAN_GOALS_ENABLED:
        print("‚úÖ Obsidian goals integration enabled")
    else:
        print("‚ÑπÔ∏è Obsidian goals integration disabled")
    
    if Config.GOOGLE_DRIVE_ENABLED:
        print("‚úÖ Google Drive integration enabled")
    else:
        print("‚ÑπÔ∏è Google Drive integration disabled")
    
    print("üéâ Automation Hub ready!")

# ============================================================================
# MAIN ENTRY POINT
# ============================================================================

if __name__ == '__main__':
    try:
        initialize_application()
        
        # Start Flask app
        app.run(
            debug=Config.DEBUG, 
            host='0.0.0.0', 
            port=5000
        )
        
    except Exception as e:
        print(f"üí• Failed to start application: {e}")
        exit(1)